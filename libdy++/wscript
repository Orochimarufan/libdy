# WAF buildscript
# :vim set ft=python

headers = ()
public_headers = "dy++.h", "dy++impl.h", "dy++conv.h", "callable.h", "util.h"
sources = "dy++.cpp",

def options(opt):
    opt.load("compiler_cxx")

    opt.add_option("-T", "--trap", action="store_true",
        help="Raise SIGTRAP when a libdy exception is encountered in dy++")


def configure(cnf):
    cnf.load("compiler_cxx")

    if (cnf.options.trap):
        cnf.env.__LIBDYPP_TRAP = "1"
    else:
        cnf.env.__LIBDYPP_TRAP = ""

    cnf.write_config_header("config.h")


def build(bld):
    defs = ["__LIBDYPP_LIBRARY"]
    if bld.env.__LIBDYPP_TRAP:
        defs.append("__LIBDYPP_TRAP")

    bld.shlib(
        source=sources,
        target="dy++",

        includes=[".", ".."],
        defines=defs,
        cxxflags=["-std=c++14"],
        use="dy"
    )
