# WAF buildscript
# :vim set ft=python

# Sources
headers = (
    "dy_p.h",
    "hash_p.h",
    "dict_p.h",
    "string_p.h",
    "freelist_p.h",
    "userdata_p.h",
)

public_headers = (
    "config.h",
    "runtime.h",

    # Utilities
    "buildstring.h",
    "json_token.h",
    "linalloc.h",

    # Objects
    "types.h",
    "object.h",
    "constants.h",
    "numbers.h",
    "dystring.h",
    "collections.h",
    "json.h",
    "call.h",
    "userdata.h",

    # Exceptions
    "exceptions.h",
    "exceptions_c.h",

    "dy.h",
)

sources = (
    "host.c",
    "hash.c",
    "string.c",
    "dict.c",
    "dy.c",
    "error.c",
    "list.c",
    "freelist.c",
    "string_intern.c",
    "userdata.c",
    "linalloc.c",
    "buildstring.c",
    "json_token.c",
    "json.c",
)

# Build
def options(opt):
    opt.load("compiler_c")
    opt.load("doxygen")


def configure(cnf):
    cnf.load("compiler_c")
    cnf.load("doxygen")

    #cnf.write_config_header("config.h")


def build(bld):
    bld.shlib(
        source=sources,
        target="dy",

        includes=["."],
        defines=["BUILDING_LIBDY_CORE"],
        cflags=["-std=c11", "-fvisibility=hidden"],
        linkflags=["-lm"], #// TODO: maybe inline?
    )

    if bld.env.DOXYGEN and not bld.env.NO_DOXYGEN:
        bld(features="doxygen",
            doxyfile="Doxyfile",
            pars={"PROJECT_NUMBER": "%s+%s" % ("dev", bld.git_rev)}
        )
